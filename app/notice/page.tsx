'use client';
import React, { useState } from 'react';
import { v4 as uuidv4 } from 'uuid';
import CommentList from '@/components/notice/CommentList';
import Image from 'next/image';
import defaultImg from '@/public/image/notice/defaultProfile.svg';
import FullHeart from '@/public/image/notice/FullHeart.svg';
import arrow from '@/public/image/notice/Left.svg';
import EmptyHeart from '@/public/image/notice/EmptyHeart.svg';
import Send from '@mui/icons-material/Send';
import chat from '@/public/image/notice/chat.svg';
import DeletePopup from '@/components/notice/DeletePostPopup';

const Page = () => {
  const text = `‚ùóÔ∏èÍπîÎ£®ÏïÑ 9Ïõî Ï†ïÍ∏∞Í≥µÏó∞‚ùóÔ∏è
ÏïàÎÖïÌïòÏÑ∏Ïöî ÍπîÎ£®ÏïÑ 21Í∏∞ Í∏∞Ïû• ÏµúÏäπÏõêÏûÖÎãàÎã§ü§©
9Ïõî 1Ïùº Í∏àÏöîÏùº, ÍπîÎ£®ÏïÑÏùò 9Ïõî Ï†ïÍ∏∞Í≥µÏó∞Ïù¥ ÏûàÏäµÎãàÎã§‚ÄºÔ∏è
Ïû¨ÌïôÏÉùÏù¥Ïã† ÏÑ†Î∞∞ÎãòÎì§ÍªòÏÑúÎäî ÏàòÏóÖÏù¥ ÎÅùÎÇú ÌõÑÏóê, Ï°∏ÏóÖÏÉùÏù¥Ïã† ÏÑ†Î∞∞ÎãòÎì§ÍªòÏÑúÎäî ÏãúÍ∞ÑÏù¥ ÎêòÏã†Îã§Î©¥ Í≥µÏó∞ Î≥¥Îü¨Ïò§ÏÖîÏÑú Ìï®Íªò Ï¶êÍ≤®Ï£ºÏãúÎ©¥ Ï¢ãÏùÑ Í≤É Í∞ôÏäµÎãàÎã§ !!

> 9Ïõî Ï†ïÍ∏∞Í≥µÏó∞ ÏùºÏ†ï <
ÎÇ†Ïßú : 9Ïõî 1Ïùº Í∏àÏöîÏùº
ÏãúÍ∞Ñ : Ïò§ÌõÑ 6Ïãú ~ 9Ïãú
Ïû•ÏÜå : ÌîåÎ†âÏä§ÎùºÏö¥ÏßÄ
Ìã∞ÏºìÍ∞ÄÍ≤© : 5000Ïõê

Îí∑ÌíÄÏù¥ : Ïò§ÌõÑ 9Ïãú ~
Ïû•ÏÜå: Ïò§Îß•

Í≥µÏó∞ Ïù¥ÌõÑÏóê Îí∑ÌíÄÏù¥Î•º ÏßÑÌñâÌï† ÏòàÏ†ïÏûÖÎãàÎã§. Îí∑ÌíÄÏù¥ Ïû•ÏÜå ÏòàÏïΩÏùÑ ÏúÑÌï¥ÏÑú ÎåÄÎûµÏ†ÅÏù∏ Ïù∏ÏõêÏùÑ ÌôïÏù∏ÌïòÍ≥† ÏûàÏäµÎãàÎã§!
ÌòπÏãú Í≥µÏó∞Ïóê Ï∞∏ÏÑùÌïòÏãúÎäî ÏÑ†Î∞∞ÎãòÎì§Ïù¥ÎÇò, Îí∑ÌíÄÏù¥Ïóê Ï∞∏ÏÑùÌïòÏãúÎäî ÏÑ†Î∞∞ÎãòÎì§ÍªòÏÑúÎäî 010-4827-2589Î°ú Ïó∞ÎùΩÏ£ºÏãúÎ©¥ Í∞êÏÇ¨ÌïòÍ≤†ÏäµÎãàÎã§ü§©

Í∏∞ÌÉÄ Î™®Îì† Î¨∏ÏùòÏÇ¨Ìï≠ÏùÄ ÌéòÏù¥Ïä§Î∂Å Î©îÏÑ∏ÏßÄÎÇò ÎåìÍ∏Ä, ÎòêÎäî ÏúÑÏùò Ï†ÑÌôîÎ≤àÌò∏Î°ú Ïó∞ÎùΩÏ£ºÏÑ∏Ïöî ! Í∞êÏÇ¨Ìï©ÎãàÎã§ü§©ü§©`;

  const [isFilled, setIsFilled] = useState(false);
  const [heartCount, setHeartCount] = useState(0);
  const [chatCount, setChatCount] = useState(0);
  const [replyingToId, setReplyingToId] = useState<string | null>(null);

  const [comments, setComments] = useState<
    {
      id: string;
      name: string;
      date: string;
      text: string;
      replying: boolean;
      replies?: any[];
    }[]
  >([]);
  const [commentText, setCommentText] = useState('');
  const [showDeletePopup, setShowDeletePopup] = useState(false);
  const [replyText, setReplyText] = useState('');

  const handleToggle = () => {
    setIsFilled((prev) => !prev);
    setHeartCount((prev) => (isFilled ? prev - 1 : prev + 1));
  };

  const addComment = () => {
    if (commentText.trim() === '') return;
    const newComment = {
      id: uuidv4(),
      name: 'ÏõêÎßàÎ£®',
      date: new Date().toLocaleString(),
      text: commentText,
      replying: false,
      deleted: false,
      replies: [],
    };
    setComments((prevComments) => {
      const updatedComments = [...prevComments, newComment];
      return updatedComments;
    });
    setCommentText('');
    setChatCount((prev) => prev + 1);
  };

  const addReply = (id: string, replyText: string) => {
    const newReply = {
      id: uuidv4(),
      name: 'ÏõêÏ±ÑÏòÅ',
      date: new Date().toLocaleString(),
      text: replyText,
      replying: false,
    };
    setComments((prevComments) =>
      prevComments.map((comment) =>
        comment.id === id
          ? {
              ...comment,
              replying: true,
              replies: [...(comment.replies || []), newReply],
            }
          : comment
      )
    );

    setReplyText('');
    setReplyingToId(null);
    setChatCount((prev) => prev + 1);
  };

  const handleDeleteComment = (id: string) => {
    setComments((prevComments) =>
      prevComments.map((comment) =>
        comment.id === id
          ? { ...comment, text: 'ÏÇ≠Ï†úÎêú ÎåìÍ∏ÄÏûÖÎãàÎã§.', deleted: true }
          : comment
      )
    );
    setChatCount((prev) => Math.max(0, prev - 1));
  };

  const handleDeleteReply = (commentId: string, replyId: string) => {
    setComments((prevComments) =>
      prevComments.map((comment) =>
        comment.id === commentId
          ? {
              ...comment,
              replies: comment.replies?.filter((reply) => reply.id !== replyId),
            }
          : comment
      )
    );
    setChatCount((prev) => Math.max(0, prev - 1));
  };
  const handleDeleteClick = () => {
    setShowDeletePopup(true);
  };

  const handleDeleteConfirm = () => {
    // ÏÇ≠Ï†ú Î°úÏßÅ Ï∂îÍ∞Ä
    setShowDeletePopup(false);
  };

  const handleDeleteCancel = () => {
    setShowDeletePopup(false);
  };

  return (
    <div className="flex flex-col items-center justify-center w-full h-full">
      <div className="flex flex-col items-center justify-center pt-16 w-full max-w-[500px] pad:max-w-[786px] dt:max-w-[1200px] max-pad:px-[16px]">
        <div className="flex flex-col w-full gap-16">
          <div className="flex mt-8">
            <Image
              src={defaultImg}
              alt="default-profile"
              width={88}
              height={88}
              className="dt:flex pad:flex ph:hidden"
            />
            <div className="w-full flex flex-col dt:ml-[24px] pad:ml-[24px] ph:ml-0">
              <span className="font-pretendard text-[32px] font-semibold">
                2024ÎÖÑ 9Ïõî Ï†ïÍ∏∞Í≥µÏó∞
              </span>
              <span className="w-full flex flex-row mt-[16px] items-center  justify-between">
                <div className="flex flex-row gap-2">
                  <span className="font-pretendard text-base font-medium flex">
                    Í¥ÄÎ¶¨Ïûê
                  </span>
                  <div className="h-[24px] border-l border-black" />
                  <span className="font-pretendard text-base font-medium flex">
                    2024. 08. 01
                  </span>
                </div>
                <div className="flex gap-4">
                  <span className="font-pretendard text-base font-normal cursor-pointer">
                    ÏàòÏ†ï
                  </span>
                  <span
                    className="font-pretendard text-base text-danger-50 font-normal cursor-pointer"
                    onClick={handleDeleteClick}
                  >
                    ÏÇ≠Ï†ú
                  </span>
                </div>
              </span>
            </div>
          </div>
          <div className="w-full border-b border-gray-15" />
          <div className="font-pretendard text-xl font-medium whitespace-pre-wrap word-break: break-word">
            {text}
          </div>
          <div className="w-full border-b border-gray-15 mb-10" />
        </div>
        <div className="w-full">
          <div className="flex flex-col mb-10">
            <div className="flex items-center">
              <div
                onClick={handleToggle}
                style={{ cursor: 'pointer' }}
                className="flex items-center"
              >
                <Image
                  src={isFilled ? FullHeart : EmptyHeart}
                  alt="heart"
                  width={20}
                  height={20}
                />
                <span className="ml-[10px] font-pretendard text-base">
                  {heartCount}
                </span>
              </div>
              <div className="flex items-center ml-[24px]">
                <Image src={chat} alt="chat" width={24} height={24} />
                <span className="ml-[10px] font-pretendard text-base">
                  {chatCount}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* ÎåìÍ∏Ä Î¶¨Ïä§Ìä∏ */}
        <CommentList
          comments={comments}
          onAddReply={addReply}
          onDeleteComment={handleDeleteComment}
          onDeleteReply={handleDeleteReply}
        />

        {/* ÎåìÍ∏Ä ÏûÖÎ†•Ï∞Ω */}
        <div className="w-full flex items-start gap-3 mb-10">
          <input
            type="text"
            value={commentText}
            onChange={(e) => setCommentText(e.target.value)}
            onKeyDown={(e) => {
              if (e.nativeEvent.isComposing) return;
              if (e.key === 'Enter') addComment();
            }}
            placeholder=" ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
            className="w-full min-h-[60px] border font-pretendard text-base font-semibold border-black rounded-lg px-3 py-2 placeholder:text-gray-40 focus:outline-none"
          />
          <button
            className="border rounded-lg border-black min-w-[60px] min-h-[60px] cursor-pointer flex items-center justify-center"
            onClick={addComment}
          >
            <Send width={20} height={20} />
          </button>
        </div>
        <div className="w-full">
          <div className="flex items-start w-full">
            <div className="flex w-[90px]  cursor-pointer  gap-[10px]">
              <Image src={arrow} alt="arrow" width={24} height={24} />
              <span className="font-pretendard text-base font-medium">
                Î™©Î°ùÏúºÎ°ú
              </span>
            </div>
          </div>
        </div>
      </div>

      {showDeletePopup && (
        <DeletePopup
          onConfirm={handleDeleteConfirm}
          onClose={handleDeleteCancel}
        />
      )}
    </div>
  );
};

export default Page;
